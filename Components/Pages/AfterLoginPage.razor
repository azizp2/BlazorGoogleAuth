@page "/after-login"

@inject AppDbContext dbContext
@inject NavigationManager nav
<h3>After Login</h3>

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if(!httpContext.User.Identity!.IsAuthenticated)
            return;

        var name = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)!.Value;
        var email = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)!.Value;

        var getUser = await dbContext.GoogleUsers.FirstOrDefaultAsync(u => u.Email == email);
        if (getUser == null)
        {
            var users = await dbContext.GoogleUsers.ToListAsync();
            int count = users != null ? users.Count() : 0;
            var user = new AppUser
                {
                    Name = name,
                    Email = email
                };
            if (count == 0)
            {
                user.Role = "Admin";
            }
            else
            {
                user.Role = "User";
            }

            dbContext.GoogleUsers.Add(user);
            await dbContext.SaveChangesAsync();
        }

        var _user = await dbContext.GoogleUsers.FirstOrDefaultAsync(u => u.Email == email);

            Claim[] claims = [
                new Claim(ClaimTypes.NameIdentifier, _user!.Id.ToString()),
                new Claim(ClaimTypes.GivenName, _user!.Name.ToString()),
                new Claim(ClaimTypes.Email, _user!.Email.ToString()),
                new Claim(ClaimTypes.Role, _user!.Role.ToString()),
            ];

            var identity = new ClaimsIdentity(claims, AppConstants.AuthScheme);
            var prin = new ClaimsPrincipal(identity);
            await httpContext.SignInAsync(AppConstants.AuthScheme, prin);
            nav.NavigateTo("/");

    }

}
